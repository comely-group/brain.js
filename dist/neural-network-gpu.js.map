{"version":3,"sources":["../src/neural-network-gpu.js"],"names":["NeuralNetworkGPU","options","forwardPropagate","backwardPropagate","changesPropagate","biasesPropagate","biasCopies","copyBias","changesCopies","copyChanges","weightsCopies","copyWeights","errorCheckInterval","gpu","GPU","mode","buildRunInput","buildCalculateDeltas","buildGetChanges","buildChangeBiases","buildGetMSE","value","logErrorRate","runInput","input","calculateDeltas","target","adjustWeights","getMSE","errors","outputLayer","getChanges","changeBiases","weightedSum","activation","weightedSumSigmoid","weightedSumRelu","weightedSumLeakyRelu","weightedSumTanh","Error","layer","createKernel","output","sizes","outputToTexture","hardcodeConstants","constants","size","texturizeInputData","thread","x","outputImmutable","outputs","weights","biases","calcDeltas","calcDeltasSigmoid","calcDeltasRelu","calcDeltasLeakyRelu","calcDeltasTanh","createKernelMap","error","alias","calcErrorOutput","deltas","targets","calcError","nextWeights","nextDeltas","length","addWeights","changes","calcChanges","previousOutputs","change","learningRate","trainOpts","momentum","y","hardCodeConstants","addBiases","mse","isRunnable","inputLookup","lookup","toArray","inputLookupLength","inputTexture","outputTextures","outputLookup","toObject","data","updateTrainingOptions","formatData","endTime","Date","now","timeout","status","iterations","verifyIsInitialized","texturizeOutputData","map","set","Array","from","NeuralNetwork","prototype","toJSON","call","getTrainOptsJSON","inputs","sum","k","Math","exp","tanh","previousChanges","i","pow"],"mappings":"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","file":"neural-network-gpu.js","sourcesContent":["import NeuralNetwork from './neural-network';\r\nimport lookup from './lookup';\r\nimport GPU from 'gpu.js';\r\n\r\n/**\r\n *\r\n * @param {object} options\r\n * @constructor\r\n */\r\nexport default class NeuralNetworkGPU extends NeuralNetwork {\r\n  constructor(options = {}) {\r\n    super(options);\r\n    this.forwardPropagate = [];\r\n    this.backwardPropagate = [];\r\n    this.changesPropagate = [];\r\n    this.biasesPropagate = [];\r\n    this.biasCopies = [];\r\n    this.copyBias = [];\r\n    this.changesCopies = [];\r\n    this.copyChanges = [];\r\n    this.weightsCopies = [];\r\n    this.copyWeights = [];\r\n    this.errorCheckInterval = 100;\r\n    this.gpu = new GPU({mode: options.mode});\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  initialize() {\r\n    super.initialize();\r\n    this.buildRunInput();\r\n    this.buildCalculateDeltas();\r\n    this.buildGetChanges();\r\n    this.buildChangeBiases();\r\n    this.buildGetMSE();\r\n  }\r\n\r\n  setActivation() {}\r\n\r\n  /**\r\n   *\r\n   * @param value\r\n   * @param logErrorRate\r\n   */\r\n  trainPattern(value, logErrorRate) {\r\n    // forward propagate\r\n    this.runInput(value.input);\r\n\r\n    // back propagate\r\n    this.calculateDeltas(value.target);\r\n    this.adjustWeights();\r\n\r\n    if (logErrorRate) {\r\n      return this.getMSE(this.errors[this.outputLayer])[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  adjustWeights() {\r\n    this.getChanges();\r\n    this.changeBiases();\r\n  }\r\n\r\n  buildRunInput() {\r\n    let weightedSum = null;\r\n\r\n    switch (this.activation) {\r\n      case 'sigmoid':\r\n        weightedSum = weightedSumSigmoid;\r\n        break;\r\n      case 'relu':\r\n        weightedSum = weightedSumRelu;\r\n        break;\r\n      case 'leaky-relu':\r\n        weightedSum = weightedSumLeakyRelu;\r\n        break;\r\n      case 'tanh':\r\n        weightedSum = weightedSumTanh;\r\n        break;\r\n      default:\r\n        throw new Error('unknown activation ' + this.activation);\r\n    }\r\n\r\n    for(let layer = 1; layer <= this.outputLayer; layer++){\r\n      this.forwardPropagate[layer] = this.gpu.createKernel(weightedSum, {\r\n        output: [this.sizes[layer]],\r\n        outputToTexture: true,\r\n        hardcodeConstants: true,\r\n        constants: {\r\n          size: this.sizes[layer - 1]\r\n        }\r\n      });\r\n    }\r\n\r\n    this.texturizeInputData = this.gpu.createKernel(function(value) {\r\n      return value[this.thread.x];\r\n    }, {\r\n      output: [this.sizes[1]],\r\n      outputToTexture: true,\r\n      hardcodeConstants: true,\r\n      outputImmutable: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  runInput(input) {\r\n    let output;\r\n    this.outputs[0] = input;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      this.outputs[layer] = this.forwardPropagate[layer](\r\n        this.weights[layer],\r\n        this.biases[layer],\r\n        input\r\n      );\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  buildCalculateDeltas() {\r\n    let calcDeltas = null;\r\n\r\n    switch (this.activation) {\r\n      case 'sigmoid':\r\n        calcDeltas = calcDeltasSigmoid;\r\n        break;\r\n      case 'relu':\r\n        calcDeltas = calcDeltasRelu;\r\n        break;\r\n      case 'leaky-relu':\r\n        calcDeltas = calcDeltasLeakyRelu;\r\n        break;\r\n      case 'tanh':\r\n        calcDeltas = calcDeltasTanh;\r\n        break;\r\n      default:\r\n        throw new Error('unknown activation ' + this.activation);\r\n    }\r\n\r\n    for (let layer = this.outputLayer; layer > 0; layer--) {\r\n      if (layer === this.outputLayer) {\r\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\r\n            error: GPU.alias('calcErrorOutput', calcErrorOutput),\r\n            deltas: GPU.alias('calcDeltas', calcDeltas)\r\n          }, function(outputs, targets) {\r\n            const output = outputs[this.thread.x];\r\n            return calcDeltas(calcErrorOutput(output, targets), output);\r\n          }, {\r\n            output: [this.sizes[layer]],\r\n            outputToTexture: true,\r\n            hardcodeConstants: true\r\n          });\r\n      } else {\r\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\r\n            error: GPU.alias('calcError', calcError),\r\n            deltas: GPU.alias('calcDeltas', calcDeltas),\r\n          }, function(nextWeights, outputs, nextDeltas){\r\n            let output = outputs[this.thread.x];\r\n            return calcDeltas(calcError(nextWeights, nextDeltas), output);\r\n          }, {\r\n            output: [this.sizes[layer]],\r\n            outputToTexture: true,\r\n            hardcodeConstants: true,\r\n            constants: {\r\n              size: this.deltas[layer + 1].length\r\n            }\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  calculateDeltas(target) {\r\n    for (let layer = this.outputLayer; layer > 0; layer--) {\r\n      let output;\r\n\r\n      if (layer === this.outputLayer) {\r\n        output = this.backwardPropagate[layer](\r\n          this.outputs[layer],\r\n          target);\r\n      } else {\r\n        output = this.backwardPropagate[layer](\r\n          this.weights[layer + 1],\r\n          this.outputs[layer],\r\n          this.deltas[layer + 1],\r\n        );\r\n      }\r\n\r\n      this.deltas[layer] = output.deltas;\r\n      this.errors[layer] = output.error;\r\n    }\r\n  }\r\n\r\n  buildGetChanges() {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      this.changesPropagate[layer] = this.gpu.createKernelMap({\r\n          weights: GPU.alias('addWeights', addWeights),\r\n          changes: GPU.alias('calcChanges', calcChanges)\r\n        },\r\n        function(previousOutputs, deltas, weights, changes) {\r\n          let change = calcChanges(\r\n            changes,\r\n            deltas,\r\n            previousOutputs);\r\n\r\n            return addWeights(change, weights);\r\n        }, {\r\n          output: [this.sizes[layer - 1], this.sizes[layer]],\r\n          outputToTexture: true,\r\n          hardcodeConstants: true,\r\n          constants:{\r\n            size: this.outputs[layer - 1].length,\r\n            learningRate: this.trainOpts.learningRate,\r\n            momentum: this.trainOpts.momentum\r\n          }\r\n        });\r\n\r\n      this.copyChanges[layer] = this.gpu.createKernel(function(value) {\r\n        return value[this.thread.y][this.thread.x];\r\n      }, {\r\n        output: this.changesPropagate[layer].output,\r\n        outputToTexture: true,\r\n        hardCodeConstants: true\r\n      });\r\n\r\n      this.copyWeights[layer] = this.gpu.createKernel(function(value) {\r\n        return value[this.thread.y][this.thread.x];\r\n      }, {\r\n        output: this.changesPropagate[layer].output,\r\n        outputToTexture: true,\r\n        hardCodeConstants: true\r\n      });\r\n    }\r\n  }\r\n\r\n  getChanges() {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      let output = this.changesPropagate[layer](\r\n        this.outputs[layer - 1],\r\n        this.deltas[layer],\r\n        this.weightsCopies[layer] || this.weights[layer],\r\n        this.changesCopies[layer] || this.changes[layer]\r\n      );\r\n      this.changes[layer] = output.changes;\r\n      this.weights[layer] = output.weights;\r\n\r\n      this.changesCopies[layer] = this.copyChanges[layer](output.changes);\r\n      this.weightsCopies[layer] = this.copyWeights[layer](output.weights);\r\n    }\r\n  }\r\n\r\n  buildChangeBiases() {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      this.biasesPropagate[layer] = this.gpu.createKernel(addBiases, {\r\n        output: [this.sizes[layer]],\r\n        outputToTexture: true,\r\n        hardcodeConstants: true,\r\n        constants: {\r\n          learningRate: this.trainOpts.learningRate\r\n        }\r\n      });\r\n      this.copyBias[layer] = this.gpu.createKernel(function(value) {\r\n        return value[this.thread.x];\r\n      }, {\r\n        output: this.biasesPropagate[layer].output,\r\n        outputToTexture: true,\r\n        hardCodeConstants: true\r\n      });\r\n    }\r\n  }\r\n\r\n  changeBiases() {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      this.biases[layer] = this.biasesPropagate[layer](\r\n        this.biasCopies[layer] || this.biases[layer],\r\n        this.deltas[layer]\r\n      );\r\n      this.biasCopies[layer] = this.copyBias[layer](this.biases[layer]);\r\n    }\r\n  }\r\n\r\n  buildGetMSE() {\r\n    this.getMSE = this.gpu.createKernel(mse, {\r\n      output: [1],\r\n      hardcodeConstants: true,\r\n      constants: {\r\n        size: this.sizes[this.outputLayer]\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  run(input) {\r\n    if (!this.isRunnable) return null;\r\n    if (this.inputLookup) {\r\n      input = lookup.toArray(this.inputLookup, input, this.inputLookupLength);\r\n    }\r\n    const inputTexture = this.texturizeInputData(input);\r\n    const outputTextures = this.runInput(inputTexture);\r\n    let output;\r\n    if (outputTextures.toArray) {\r\n      output = outputTextures.toArray(this.gpu);\r\n    } else {\r\n      output = outputTextures;\r\n    }\r\n\r\n    if (this.outputLookup) {\r\n      output = lookup.toObject(this.outputLookup, output);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @protected\r\n   * @return { data, status, endTime }\r\n   */\r\n  prepTraining(data, options) {\r\n    this.updateTrainingOptions(options);\r\n    data = this.formatData(data);\r\n    const endTime = Date.now() + this.trainOpts.timeout;\r\n\r\n    const status = {\r\n      error: 1,\r\n      iterations: 0\r\n    };\r\n\r\n    this.verifyIsInitialized(data);\r\n\r\n    const texturizeOutputData = this.gpu.createKernel(function(value) {\r\n      return value[this.thread.x];\r\n    }, {\r\n      output: [data[0].output.length],\r\n      outputToTexture: true,\r\n      hardcodeConstants: true,\r\n      outputImmutable: true\r\n    });\r\n\r\n    return {\r\n      data: data.map((set) => {\r\n        return {\r\n          input: this.texturizeInputData(set.input),\r\n          output: texturizeOutputData(set.output)\r\n        }\r\n      }),\r\n      status,\r\n      endTime\r\n    };\r\n  }\r\n\r\n  toJSON() {\r\n    if (!this.weights[1].toArray) {\r\n      // in fallback mode\r\n      return super.toJSON();\r\n    }\r\n\r\n    // in GPU mode\r\n    const weights = [];\r\n    const biases = [];\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      weights[layer] = Array.from(this.weights[layer].toArray(this.gpu));\r\n      biases[layer] = Array.from(this.biases[layer].toArray(this.gpu));\r\n    }\r\n\r\n    // pseudo lo-fi decorator\r\n    return NeuralNetwork.prototype.toJSON.call({\r\n      inputLookup: this.inputLookup,\r\n      outputLookup: this.outputLookup,\r\n      outputLayer: this.outputLayer,\r\n      sizes: this.sizes,\r\n      getTrainOptsJSON: () => this.getTrainOptsJSON(),\r\n      weights,\r\n      biases,\r\n    });\r\n  }\r\n}\r\n\r\nfunction weightedSumSigmoid(weights, biases, inputs) {\r\n  let sum = biases[this.thread.x];\r\n  for (let k = 0; k < this.constants.size; k++) {\r\n    sum += weights[this.thread.x][k] * inputs[k];\r\n  }\r\n  //sigmoid\r\n  return 1 / (1 + Math.exp(-sum));\r\n}\r\n\r\nfunction weightedSumRelu(weights, biases, inputs) {\r\n  let sum = biases[this.thread.x];\r\n  for (let k = 0; k < this.constants.size; k++) {\r\n    sum += weights[this.thread.x][k] * inputs[k];\r\n  }\r\n  //relu\r\n  return (sum < 0 ? 0 : sum);\r\n}\r\n\r\nfunction weightedSumLeakyRelu(weights, biases, inputs) {\r\n  let sum = biases[this.thread.x];\r\n  for (let k = 0; k < this.constants.size; k++) {\r\n    sum += weights[this.thread.x][k] * inputs[k];\r\n  }\r\n  //leaky relu\r\n  return (sum < 0 ? 0 : 0.01 * sum);\r\n}\r\n\r\nfunction weightedSumTanh(weights, biases, inputs) {\r\n  let sum = biases[this.thread.x];\r\n  for (let k = 0; k < this.constants.size; k++) {\r\n    sum += weights[this.thread.x][k] * inputs[k];\r\n  }\r\n  //tanh\r\n  return Math.tanh(sum);\r\n}\r\n\r\nfunction calcErrorOutput(output, targets) {\r\n  return targets[this.thread.x] - output;\r\n}\r\n\r\nfunction calcDeltasSigmoid(error, output) {\r\n  //sigmoid derivative\r\n  return error * output * (1 - output);\r\n}\r\n\r\nfunction calcDeltasRelu(error, output) {\r\n  //relu derivative\r\n  return output > 0 ? error : 0;\r\n}\r\n\r\nfunction calcDeltasLeakyRelu(error, output) {\r\n  //leaky relu derivative\r\n  return output > 0 ? error : 0.01 * error;\r\n}\r\n\r\nfunction calcDeltasTanh(error, output) {\r\n  //tanh derivative\r\n  return (1 - output * output) * error;\r\n}\r\n\r\nfunction calcError(nextWeights, nextDeltas){\r\n  let error = 0;\r\n  for(let k = 0; k < this.constants.size; k++){\r\n    error += nextDeltas[k] * nextWeights[k][this.thread.x];\r\n  }\r\n  return error;\r\n}\r\n\r\nfunction calcChanges(\r\n  previousChanges,\r\n  deltas,\r\n  previousOutputs\r\n) {\r\n  return (this.constants.learningRate * deltas[this.thread.y] * previousOutputs[this.thread.x])\r\n      + (this.constants.momentum * previousChanges[this.thread.y][this.thread.x]);\r\n}\r\n\r\nfunction addWeights(change, weights){\r\n  return change + weights[this.thread.y][this.thread.x];\r\n}\r\n\r\nfunction addBiases(biases, deltas){\r\n  return biases[this.thread.x] + (deltas[this.thread.x] * this.constants.learningRate);\r\n}\r\n\r\n// mean squared error, reimplemented for GPU\r\nfunction mse(errors) {\r\n  let sum = 0;\r\n  for (let i = 0; i < this.constants.size; i++) {\r\n    sum += Math.pow(errors[i], 2);\r\n  }\r\n  return sum / this.constants.size;\r\n}\r\n"]}